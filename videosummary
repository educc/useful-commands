#!/Users/ecacho/.pyenv/shims/python
import argparse
import dataclasses
import json
import logging
import os
import re
import sys
import time
import unicodedata
import urllib.request

logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

CUR_DIR = os.path.dirname(__file__)
BIN_WHISPER = os.path.join(CUR_DIR, "whispercpp") #bash whisper from this repo

BIN_YT_DLP = None   #cmd tool to download youtube videos
OLLAMA_BASE_URL = None # to do the summary
OLLAMA_MODEL = None # using model to do the summary

LANGUAGE_EN = 'en'
LANGUAGE_ES = 'es'




@dataclasses.dataclass
class RunArgs:
    youtube_url: str
    language: str # en or es
    output_filename: str | None

def slugify(text: str) -> str:
    # Normalize the text to NFKD form
    text = unicodedata.normalize('NFKD', text)
    # Encode to ASCII bytes, ignore non-ASCII characters, and decode back to string
    text = text.encode('ascii', 'ignore').decode('ascii')
    # Convert to lowercase
    text = text.lower()
    # Replace non-alphanumeric characters with hyphens
    text = re.sub(r'[^a-z0-9]+', '-', text)
    # Remove leading and trailing hyphens
    text = text.strip('-')
    return text

def get_env_os(key: str, default: str = None) -> str:
    value = os.environ.get(key)
    if not value and not default:
        log.error(f"Require environment variable {key} is not set. Please set it.")
        sys.exit(1)
    return value or default

def assign_default_env():
    global BIN_YT_DLP, OLLAMA_BASE_URL, OLLAMA_MODEL
    BIN_YT_DLP = get_env_os("VS_YT_DLP")
    OLLAMA_BASE_URL = get_env_os("VS_OLLAMA_BASE_URL", "http://localhost:11434")
    OLLAMA_MODEL = get_env_os("VS_OLLAMA_MODEL", "llama3.2")

def get_video_title(youtube_url: str) -> str:
    log.info(f"Retrieving video title for: {youtube_url}")
    cmd = f"{BIN_YT_DLP} --get-title {youtube_url}"
    result = os.popen(cmd).read().strip()
    if not result:
        log.error("Failed to retrieve video title")
        sys.exit(1)
    return result


def download_video(youtube_url: str, video_filename_prefix) -> str:
    log.info(f"Downloading video: {youtube_url}")
    output_dir = os.curdir
    video_filename = video_filename_prefix
    video_filename_abs = os.path.join(output_dir, video_filename)
    cmd = f"{BIN_YT_DLP} -f \"worstaudio\" -o {video_filename_abs} {youtube_url}"
    os.system(cmd)

    # find file by prefix
    video_filename_found = None
    for file in os.listdir(output_dir):
        if file.startswith(video_filename):
            video_filename_found = file
    #

    # check if file exists
    if video_filename_found is None or not os.path.isfile(video_filename_found):
        log.error(f"Youtube download file '{video_filename}' does not exist")
        sys.exit(1)
    #
    return video_filename_found

def transcribe_video(video_filename: str, lang: str) -> str:
    log.info(f"Transcribing video: {video_filename}")

    # using whispercpp
    cmd = f"{BIN_WHISPER} '{video_filename}' '{lang}' "
    os.system(cmd)

    expected_filename = video_filename + ".txt"
    if not os.path.isfile(expected_filename):
        log.error(f"Expected file '{expected_filename}' does not exist")
        sys.exit(1)
    return expected_filename

def summarize_transcript(transcript_filename: str) -> str:
    log.info(f"Summarizing transcript: {transcript_filename}")
    prompt = "You are a highly meticulous summarizer. " \
        "Your task is to extract all key ideas that is absolutely " \
        "faithful to the original text and covers all the key factual points. " \
        "You must ensure that the summary reflects the " \
        "essential information without omissions or inaccuracies. " \
        "You must organize the ideas into topics. " \
        "You must write the conclusion, " \
        "what is the key idea the content wants to communicate. " \
        "The text is the following: "

    with open(transcript_filename, "r") as f:
        transcript = f.read()

    # call ollama local,

    url = f"{OLLAMA_BASE_URL}/api/generate"
    data = {
        "model": OLLAMA_MODEL,
        "prompt": f"{prompt} {transcript}",
        "stream": False
    }

    req = urllib.request.Request(url=url,
                                 method='POST',
                                 data=json.dumps(data).encode('utf-8'),
                                 headers={'Content-Type': 'application/json'})
    with urllib.request.urlopen(req) as f:
        if f.status != 200:
            log.error(f"Failed Ollama API request: {f.status} {f.reason}")
            exit(1)
        rs = f.read().decode('utf-8')
        log.info(f"Ollama API response: {rs}")

        json_rs = json.loads(rs)
    return json_rs['response']




def main(args: RunArgs):
    assign_default_env()

    start_time = time.time()
    log.info(f"videosummary starts with: {args}")

    filename_prefix = slugify(get_video_title(args.youtube_url))

    video_filename = download_video(args.youtube_url, filename_prefix)
    transcribe_filename = transcribe_video(video_filename, args.language)
    summary_text = summarize_transcript(transcribe_filename)

    log.info(f"Summary:")
    log.info(summary_text)

    summary_filename = args.output_filename or filename_prefix + "_summary.txt"
    with open(summary_filename, "w") as f:
        f.write(summary_text)

    end_time = time.time()
    log.info(f"videosummary ends in {int(end_time - start_time)} seconds")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Video summary')
    parser.add_argument('youtube_url', type=str, help='URL of the YouTube video')
    parser.add_argument('-l', '--language', choices=[LANGUAGE_EN, LANGUAGE_ES], default=LANGUAGE_EN,
                        help=f"Language to process ({LANGUAGE_EN} or {LANGUAGE_ES})")
    parser.add_argument('-o', '--output',
                        help="Save the summary file with a default name 'summary.txt'")

    args = parser.parse_args()

    app_args = RunArgs(
        youtube_url=args.youtube_url,
        language=args.language,
        output_filename=args.output,
    )
    main(app_args)
